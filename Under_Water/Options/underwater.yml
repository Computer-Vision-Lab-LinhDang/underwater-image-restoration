# general settings
name: UnderWaterNet
model_type: ImageCleanModel
scale: 1
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 100

# dataset and data loader settings
datasets:
  train:
    name: TrainSet
    type: Dataset_PairedImage
    dataroot_gt: ../Dataset/train/target
    dataroot_lq: ../Dataset/train/input
    geometric_augs: true
    filename_tmpl: '{}'
    io_backend:
      type: disk

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 4
    batch_size_per_gpu: 4

    ### -------------Progressive training--------------------------
    # mini_batch_sizes: [8,5,4,2,1,1]             # Batch size per gpu   
    # iters: [92000,64000,48000,36000,36000,24000]
    # gt_size: 384   # Max patch size for progressive training
    # gt_sizes: [128,160,192,256,320,384]  # Patch sizes for progressive training.
    ### ------------------------------------------------------------

    ### ------- Training on single fixed-patch size 128x128---------
    mini_batch_sizes: [4]   
    iters: [800000]
    gt_size: 256   
    gt_sizes: [256]
    ### ------------------------------------------------------------

    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: ValSet
    type: Dataset_PairedImage
    dataroot_gt: ./Under_Water/Datasets/EUVP/test_samples/GTr
    dataroot_lq: ./Under_Water/Datasets/EUVP/test_samples/Inp
    gt_size: 256   
    io_backend:
      type: disk

# network structures
network_g:
  type: UWNet
  inp_channels: 3
  out_channels: 3
  dim: 32
  ffn_expansion_factor: 2
  stages: 2
  LayerNorm_type: 'WithBias'

# path
path:
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: ~

# training settings
train:
  total_iter: 800000
  warmup_iter: -1 # no warm up
  use_grad_clip: true

  scheduler:
    type: CosineAnnealingRestartCyclicLR
    periods: [50000, 100000, 650000]       
    restart_weights: [1, 1, 0.2]
    eta_mins: [0.0005, 0.0002, 0.000001]   

  mixing_augs:
    mixup: false
    mixup_beta: 1.2
    use_identity: true

  optim_g:
    type: AdamW
    lr: !!float 5e-4
    weight_decay: !!float 1e-4
    betas: [0.9, 0.999]
  
  # losses
  pixel_opt:
    type: WeightedLoss
    losses:
      L1Loss:
        loss_weight: 1
        reduction: mean
    weights: [1]
    verbose: true 

# validation settings
val:
  val_freq: !!float 4e3
  save_img: false
  rgb2bgr: true
  use_image: false
  max_minibatch: 8

  metrics:
    psnr: # metric name, can be arbitrary
      reference_metric: true
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false
    ssim: # metric name, can be arbitrary
      reference_metric: true
      type: calculate_ssim
      crop_border: 0
      test_y_channel: false
    uiqm: # metric name, can be arbitrary
      reference_metric: false
      type: calculate_uiqm
    uciqe: # metric name, can be arbitrary
      reference_metric: false
      type: calculate_uciqe

# logging settings
logger:
  print_freq: 1000
  save_checkpoint_freq: !!float 8e3
  use_tb_logger: false
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
