2025-07-22 12:37:31,506 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.2.0+6d15abd
	PyTorch: 2.5.1
	TorchVision: 0.20.1
2025-07-22 12:37:31,506 INFO: 
  name: UWNet
  model_type: ImageCleanModel
  scale: 1
  num_gpu: 1
  manual_seed: 100
  datasets:[
    val_1:[
      name: EUVPSet
      type: Dataset_PairedImage
      dataroot_gt: ../Dataset/testset(ref)/test-EUVP/target
      dataroot_lq: ../Dataset/testset(ref)/test-EUVP/input
      gt_size: 256
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 1
    ]
    val_2:[
      name: UIEBSet
      type: Dataset_PairedImage
      dataroot_gt: ../Dataset/testset(ref)/test-UIEB/target
      dataroot_lq: ../Dataset/testset(ref)/test-UIEB/input
      gt_size: 256
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 1
    ]
    val_3:[
      name: LSUISet
      type: Dataset_PairedImage
      dataroot_gt: ../Dataset/testset(ref)/test-LSUI/target
      dataroot_lq: ../Dataset/testset(ref)/test-LSUI/input
      gt_size: 256
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 1
    ]
  ]
  network_g:[
    type: UWNet
    inp_channels: 3
    out_channels: 3
    dim: 32
    ffn_expansion_factor: 2
    stages: 2
    LayerNorm_type: WithBias
  ]
  path:[
    pretrain_network_g: Under_Water/pretrained_models/model.pth
    strict_load_g: True
    resume_state: None
    root: /home/linhdang/workspace/kien_workspace/underwater/underwater
    results_root: /home/linhdang/workspace/kien_workspace/underwater/underwater/results/UWNet
    log: /home/linhdang/workspace/kien_workspace/underwater/underwater/results/UWNet
    visualization: /home/linhdang/workspace/kien_workspace/underwater/underwater/results/UWNet/visualization
  ]
  train:[
    total_iter: 300000
    warmup_iter: -1
    use_grad_clip: True
    scheduler:[
      type: CosineAnnealingRestartCyclicLR
      periods: [10000, 82000, 208000]
      restart_weights: [1, 1, 1]
      eta_mins: [0.001, 0.0001, 1e-06]
    ]
    mixing_augs:[
      mixup: False
      mixup_beta: 1.2
      use_identity: True
    ]
    optim_g:[
      type: AdamW
      lr: 0.001
      weight_decay: 0.0001
      betas: [0.9, 0.999]
    ]
    pixel_opt:[
      type: L1Loss
      loss_weight: 1
      reduction: mean
    ]
  ]
  val:[
    val_freq: 4000.0
    save_img: True
    rgb2bgr: True
    use_image: False
    max_minibatch: 8
    metrics:[
      psnr:[
        reference_metric: True
        type: calculate_psnr
        crop_border: 0
        test_y_channel: False
      ]
      ssim:[
        reference_metric: True
        type: calculate_ssim
        crop_border: 0
        test_y_channel: False
      ]
      uiqm:[
        reference_metric: False
        type: calculate_uiqm
      ]
      uciqe:[
        reference_metric: False
        type: calculate_uciqe
      ]
    ]
  ]
  logger:[
    print_freq: 1000
    save_checkpoint_freq: 4000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  is_train: False
  dist: False
  rank: 0
  world_size: 1

2025-07-22 12:37:31,509 INFO: Dataset Dataset_PairedImage - EUVPSet is created.
2025-07-22 12:37:31,509 INFO: Number of test images in EUVPSet: 200
2025-07-22 12:37:31,511 INFO: Dataset Dataset_PairedImage - UIEBSet is created.
2025-07-22 12:37:31,511 INFO: Number of test images in UIEBSet: 90
2025-07-22 12:37:31,514 INFO: Dataset Dataset_PairedImage - LSUISet is created.
2025-07-22 12:37:31,514 INFO: Number of test images in LSUISet: 200
2025-07-22 12:37:31,739 INFO: Network: UWNet, with parameters: 409,857
2025-07-22 12:37:31,739 INFO: UWNet(
  (embed): OverlapPatchEmbed(
    (proj): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (recon): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (middle): Block(
    (dwtblock): DWTBlock(
      (norm): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (xfm): DWTForward()
      (ifm): DWTInverse()
      (high_branch): HighFrequencyBlock(
        (fuse_conv): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
          (1): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
          (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): GELU(approximate='none')
        )
        (attn): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (1): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (2): Sigmoid()
        )
        (prj): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): GELU(approximate='none')
        )
        (mask_conv): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
          (1): Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))
          (2): PixelShuffle(upscale_factor=2)
          (3): Sigmoid()
        )
      )
      (low_branch): LowFrequencyBlock(
        (prj1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): GELU(approximate='none')
        )
        (ca): ChannelAttention(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (max_pool): AdaptiveMaxPool2d(output_size=1)
          (fc): Sequential(
            (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): GELU(approximate='none')
            (2): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (sigmoid): Sigmoid()
        )
        (prj2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): GELU(approximate='none')
        )
        (sa): SpatialAttention(
          (conv1): Sequential(
            (0): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
          )
          (sigmoid): Sigmoid()
        )
      )
      (prj_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (encoders): ModuleList(
    (0): Block(
      (dwtblock): DWTBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (xfm): DWTForward()
        (ifm): DWTInverse()
        (high_branch): HighFrequencyBlock(
          (fuse_conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
            (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (3): GELU(approximate='none')
          )
          (attn): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (2): Sigmoid()
          )
          (prj): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
            (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (3): GELU(approximate='none')
          )
          (mask_conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (1): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1))
            (2): PixelShuffle(upscale_factor=2)
            (3): Sigmoid()
          )
        )
        (low_branch): LowFrequencyBlock(
          (prj1): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): GELU(approximate='none')
          )
          (ca): ChannelAttention(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (max_pool): AdaptiveMaxPool2d(output_size=1)
            (fc): Sequential(
              (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): GELU(approximate='none')
              (2): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
            (sigmoid): Sigmoid()
          )
          (prj2): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): GELU(approximate='none')
          )
          (sa): SpatialAttention(
            (conv1): Sequential(
              (0): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            )
            (sigmoid): Sigmoid()
          )
        )
        (prj_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Downsample(
      (body): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (1): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (2): PixelUnshuffle(downscale_factor=2)
      )
    )
    (2): Block(
      (dwtblock): DWTBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (xfm): DWTForward()
        (ifm): DWTInverse()
        (high_branch): HighFrequencyBlock(
          (fuse_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
            (2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (3): GELU(approximate='none')
          )
          (attn): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (2): Sigmoid()
          )
          (prj): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
            (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (3): GELU(approximate='none')
          )
          (mask_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (2): PixelShuffle(upscale_factor=2)
            (3): Sigmoid()
          )
        )
        (low_branch): LowFrequencyBlock(
          (prj1): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
            (1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): GELU(approximate='none')
          )
          (ca): ChannelAttention(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (max_pool): AdaptiveMaxPool2d(output_size=1)
            (fc): Sequential(
              (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): GELU(approximate='none')
              (2): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
            (sigmoid): Sigmoid()
          )
          (prj2): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
            (1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): GELU(approximate='none')
          )
          (sa): SpatialAttention(
            (conv1): Sequential(
              (0): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            )
            (sigmoid): Sigmoid()
          )
        )
        (prj_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Downsample(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (2): PixelUnshuffle(downscale_factor=2)
      )
    )
  )
  (decoders): ModuleList(
    (0): Upsample(
      (body): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
        (1): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (2): PixelShuffle(upscale_factor=2)
      )
    )
    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
    (2): Block(
      (dwtblock): DWTBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (xfm): DWTForward()
        (ifm): DWTInverse()
        (high_branch): HighFrequencyBlock(
          (fuse_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
            (2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (3): GELU(approximate='none')
          )
          (attn): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (2): Sigmoid()
          )
          (prj): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
            (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
            (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (3): GELU(approximate='none')
          )
          (mask_conv): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (2): PixelShuffle(upscale_factor=2)
            (3): Sigmoid()
          )
        )
        (low_branch): LowFrequencyBlock(
          (prj1): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
            (1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): GELU(approximate='none')
          )
          (ca): ChannelAttention(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (max_pool): AdaptiveMaxPool2d(output_size=1)
            (fc): Sequential(
              (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): GELU(approximate='none')
              (2): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
            (sigmoid): Sigmoid()
          )
          (prj2): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
            (1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): GELU(approximate='none')
          )
          (sa): SpatialAttention(
            (conv1): Sequential(
              (0): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            )
            (sigmoid): Sigmoid()
          )
        )
        (prj_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Upsample(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (2): PixelShuffle(upscale_factor=2)
      )
    )
    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
    (5): Block(
      (dwtblock): DWTBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (xfm): DWTForward()
        (ifm): DWTInverse()
        (high_branch): HighFrequencyBlock(
          (fuse_conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
            (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (3): GELU(approximate='none')
          )
          (attn): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (2): Sigmoid()
          )
          (prj): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
            (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
            (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (3): GELU(approximate='none')
          )
          (mask_conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (1): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1))
            (2): PixelShuffle(upscale_factor=2)
            (3): Sigmoid()
          )
        )
        (low_branch): LowFrequencyBlock(
          (prj1): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): GELU(approximate='none')
          )
          (ca): ChannelAttention(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (max_pool): AdaptiveMaxPool2d(output_size=1)
            (fc): Sequential(
              (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): GELU(approximate='none')
              (2): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
            (sigmoid): Sigmoid()
          )
          (prj2): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): GELU(approximate='none')
          )
          (sa): SpatialAttention(
            (conv1): Sequential(
              (0): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            )
            (sigmoid): Sigmoid()
          )
        )
        (prj_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
)
2025-07-22 12:37:31,739 INFO: Loading UWNet model from Under_Water/pretrained_models/model.pth.
2025-07-22 12:37:31,770 INFO: Model [ImageCleanModel] is created.
2025-07-22 12:37:31,770 INFO: Testing EUVPSet...
2025-07-22 12:37:50,938 INFO: Validation EUVPSet,		 # psnr: 27.4361	 # ssim: 0.8826	 # uiqm: 3.2262	 # uciqe: 0.4278
2025-07-22 12:37:50,938 INFO: Testing UIEBSet...
2025-07-22 12:38:02,001 INFO: Validation UIEBSet,		 # psnr: 24.4339	 # ssim: 0.9166	 # uiqm: 3.2645	 # uciqe: 0.4444
2025-07-22 12:38:02,001 INFO: Testing LSUISet...
2025-07-22 12:38:21,266 INFO: Validation LSUISet,		 # psnr: 29.2952	 # ssim: 0.9209	 # uiqm: 3.2437	 # uciqe: 0.4269
