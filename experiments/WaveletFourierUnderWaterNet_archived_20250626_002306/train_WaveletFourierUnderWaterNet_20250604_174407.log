2025-06-04 17:44:07,959 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.2.0+7b21f57
	PyTorch: 2.5.1
	TorchVision: 0.20.1
2025-06-04 17:44:07,960 INFO: 
  name: WaveletFourierUnderWaterNet
  model_type: ImageCleanModel
  scale: 1
  num_gpu: 1
  manual_seed: 100
  datasets:[
    train:[
      name: TrainSet
      type: Dataset_PairedImage
      dataroot_gt: ./Under_Water/Datasets/LSUI/LSUI/GT
      dataroot_lq: ./Under_Water/Datasets/LSUI/LSUI/input
      geometric_augs: True
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      use_shuffle: True
      num_worker_per_gpu: 8
      batch_size_per_gpu: 8
      mini_batch_sizes: [8]
      iters: [300000]
      gt_size: 256
      gt_sizes: [256]
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 1
    ]
    val:[
      name: ValSet
      type: Dataset_PairedImage
      dataroot_gt: ./Under_Water/Datasets/LSUI/LSUI/GT
      dataroot_lq: ./Under_Water/Datasets/LSUI/LSUI/input
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 1
    ]
  ]
  network_g:[
    type: WFUWNet
    inp_channels: 3
    out_channels: 3
    dim: 32
    num_heads: [1, 2, 4, 8]
    ffn_expansion_factor: 2
    stages: 2
    bias: False
    LayerNorm_type: WithBias
  ]
  path:[
    pretrain_network_g: None
    strict_load_g: True
    resume_state: None
    root: e:\study\project\underwater\restormer
    experiments_root: e:\study\project\underwater\restormer\experiments\WaveletFourierUnderWaterNet
    models: e:\study\project\underwater\restormer\experiments\WaveletFourierUnderWaterNet\models
    training_states: e:\study\project\underwater\restormer\experiments\WaveletFourierUnderWaterNet\training_states
    log: e:\study\project\underwater\restormer\experiments\WaveletFourierUnderWaterNet
    visualization: e:\study\project\underwater\restormer\experiments\WaveletFourierUnderWaterNet\visualization
  ]
  train:[
    total_iter: 300000
    warmup_iter: -1
    use_grad_clip: True
    scheduler:[
      type: CosineAnnealingRestartCyclicLR
      periods: [92000, 208000]
      restart_weights: [1, 1]
      eta_mins: [0.0003, 1e-06]
    ]
    mixing_augs:[
      mixup: False
      mixup_beta: 1.2
      use_identity: True
    ]
    optim_g:[
      type: AdamW
      lr: 0.0003
      weight_decay: 0.0001
      betas: [0.9, 0.999]
    ]
    pixel_opt:[
      type: L1Loss
      loss_weight: 1
      reduction: mean
    ]
  ]
  val:[
    window_size: 8
    val_freq: 4000.0
    save_img: False
    rgb2bgr: True
    use_image: False
    max_minibatch: 8
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 0
        test_y_channel: False
      ]
    ]
  ]
  logger:[
    print_freq: 1000
    save_checkpoint_freq: 4000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  is_train: True
  dist: False
  rank: 0
  world_size: 1

2025-06-04 17:44:08,452 INFO: Dataset Dataset_PairedImage - TrainSet is created.
2025-06-04 17:44:08,456 INFO: Training statistics:
	Number of train images: 4279
	Dataset enlarge ratio: 1
	Batch size per gpu: 8
	World size (gpu number): 1
	Require iter number per epoch: 535
	Total epochs: 561; iters: 300000.
2025-06-04 17:44:08,794 INFO: Dataset Dataset_PairedImage - ValSet is created.
2025-06-04 17:44:08,794 INFO: Number of val images/folders in ValSet: 4279
2025-06-04 17:44:10,662 INFO: Network: WFUWNet, with parameters: 753,329
2025-06-04 17:44:10,662 INFO: WFUWNet(
  (embed): OverlapPatchEmbed(
    (proj): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (recon): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (middle): Block(
    (dwtblock): DWTBlock(
      (norm): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (xfm): DWTForward()
      (ifm): DWTInverse()
      (high_branch): HighFrequencyBlock(
        (fuse_conv): Sequential(
          (0): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (attn): Attention(
          (qkv): Conv2d(128, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (qkv_dwconv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
          (project_out): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (split_conv): Sequential(
          (0): Conv2d(128, 384, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (low_branch): LowFrequencyBlock(
        (magnitude_branch): Sequential(
          (0): DenseLayer(
            (conv): Sequential(
              (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (leaky): LeakyReLU(negative_slope=0.1, inplace=True)
          )
          (1): Conv2d(144, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (phase_branch): Sequential(
          (0): DenseLayer(
            (conv): Sequential(
              (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (leaky): LeakyReLU(negative_slope=0.1, inplace=True)
          )
          (1): Conv2d(144, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (prj_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    )
    (refine): SCFNBlock(
      (norm): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (prj_conv1): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
      (act): Sigmoid()
      (prj_conv2): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (encoders): ModuleList(
    (0): Block(
      (dwtblock): DWTBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (xfm): DWTForward()
        (ifm): DWTInverse()
        (high_branch): HighFrequencyBlock(
          (fuse_conv): Sequential(
            (0): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
          )
          (attn): Attention(
            (qkv): Conv2d(32, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (qkv_dwconv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
            (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (split_conv): Sequential(
            (0): Conv2d(32, 96, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (low_branch): LowFrequencyBlock(
          (magnitude_branch): Sequential(
            (0): DenseLayer(
              (conv): Sequential(
                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (leaky): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (1): Conv2d(48, 32, kernel_size=(1, 1), stride=(1, 1))
          )
          (phase_branch): Sequential(
            (0): DenseLayer(
              (conv): Sequential(
                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (leaky): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (1): Conv2d(48, 32, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (prj_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (refine): SCFNBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (prj_conv1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (act): Sigmoid()
        (prj_conv2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Downsample(
      (body): Sequential(
        (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PixelUnshuffle(downscale_factor=2)
      )
    )
    (2): Block(
      (dwtblock): DWTBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (xfm): DWTForward()
        (ifm): DWTInverse()
        (high_branch): HighFrequencyBlock(
          (fuse_conv): Sequential(
            (0): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (attn): Attention(
            (qkv): Conv2d(64, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (qkv_dwconv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (project_out): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (split_conv): Sequential(
            (0): Conv2d(64, 192, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (low_branch): LowFrequencyBlock(
          (magnitude_branch): Sequential(
            (0): DenseLayer(
              (conv): Sequential(
                (0): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (leaky): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (1): Conv2d(80, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (phase_branch): Sequential(
            (0): DenseLayer(
              (conv): Sequential(
                (0): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (leaky): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (1): Conv2d(80, 64, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (prj_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (refine): SCFNBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (prj_conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
        (act): Sigmoid()
        (prj_conv2): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Downsample(
      (body): Sequential(
        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PixelUnshuffle(downscale_factor=2)
      )
    )
  )
  (decoders): ModuleList(
    (0): Upsample(
      (body): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (2): PixelShuffle(upscale_factor=2)
      )
    )
    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
    (2): Block(
      (dwtblock): DWTBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (xfm): DWTForward()
        (ifm): DWTInverse()
        (high_branch): HighFrequencyBlock(
          (fuse_conv): Sequential(
            (0): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (attn): Attention(
            (qkv): Conv2d(64, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (qkv_dwconv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (project_out): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (split_conv): Sequential(
            (0): Conv2d(64, 192, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (low_branch): LowFrequencyBlock(
          (magnitude_branch): Sequential(
            (0): DenseLayer(
              (conv): Sequential(
                (0): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (leaky): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (1): Conv2d(80, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (phase_branch): Sequential(
            (0): DenseLayer(
              (conv): Sequential(
                (0): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (leaky): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (1): Conv2d(80, 64, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (prj_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (refine): SCFNBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (prj_conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
        (act): Sigmoid()
        (prj_conv2): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Upsample(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (2): PixelShuffle(upscale_factor=2)
      )
    )
    (4): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
    (5): Block(
      (dwtblock): DWTBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (xfm): DWTForward()
        (ifm): DWTInverse()
        (high_branch): HighFrequencyBlock(
          (fuse_conv): Sequential(
            (0): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
          )
          (attn): Attention(
            (qkv): Conv2d(32, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (qkv_dwconv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
            (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (split_conv): Sequential(
            (0): Conv2d(32, 96, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (low_branch): LowFrequencyBlock(
          (magnitude_branch): Sequential(
            (0): DenseLayer(
              (conv): Sequential(
                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (leaky): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (1): Conv2d(48, 32, kernel_size=(1, 1), stride=(1, 1))
          )
          (phase_branch): Sequential(
            (0): DenseLayer(
              (conv): Sequential(
                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (leaky): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (1): Conv2d(48, 32, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (prj_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (refine): SCFNBlock(
        (norm): LayerNorm(
          (body): WithBias_LayerNorm()
        )
        (prj_conv1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (act): Sigmoid()
        (prj_conv2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
)
2025-06-04 17:44:10,662 INFO: Model [ImageCleanModel] is created.
2025-06-04 17:44:32,983 INFO: Start training from epoch: 0, iter: 0
2025-06-04 17:45:00,442 INFO: 
 Updating Patch_Size to 256 and Batch_Size to 8 

